platform :ios, '13.0'

ENV['COCOAPODS_DISABLE_STATS'] = 'true'

project 'Runner', {
  'Debug' => :debug,
  'Profile' => :release,
  'Release' => :release,
}

def flutter_root
  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
  unless File.exist?(generated_xcode_build_settings_path)
    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter build ios was run first."
  end

  File.foreach(generated_xcode_build_settings_path) do |line|
    matches = line.match(/FLUTTER_ROOT\=(.*)/)
    return matches[1].strip if matches
  end
  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter build ios."
end

require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)

flutter_ios_podfile_setup

target 'Runner' do
  # Frameworks est√°ticos: compat√≠vel com Firebase e r√°pido no link
  use_frameworks! :linkage => :static
  # ‚ö†Ô∏è Removemos use_modular_headers! (costuma quebrar com Firebase e amigos)

  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))

  target 'RunnerTests' do
    inherit! :search_paths
  end
end


post_install do |installer|
  installer.pods_project.targets.each do |t|
    t.build_configurations.each do |config|
      # alvo m√≠nimo iOS
      config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
      # for√ßa Swift 5.10 (Xcode 16 defaulta pra 6)
      config.build_settings['SWIFT_VERSION'] = '5.10'
      # FirebaseCoreInternal precisa desse flag
      flags = config.build_settings['OTHER_SWIFT_FLAGS'] || '$(inherited)'
      flags += ' -Xfrontend -enable-experimental-feature -Xfrontend AccessLevelOnImport'
      config.build_settings['OTHER_SWIFT_FLAGS'] = flags
    end

    # üëá O CERTO √© chamar para cada target (n√£o no installer!)
    flutter_additional_ios_build_settings(t)
  end
end
name: Build iOS and Upload to TestFlight

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest

    env:
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      ASC_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
      ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}                   # base64 (uma linha) do .p12
      IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }} # ex: vPNZskLS
      IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }} # base64 do .mobileprovision
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    steps:
      # 0) Xcode igual ao Codemagic
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          architecture: 'arm64'

      - name: Install dependencies
        run: flutter pub get

      - name: Prepare & decode credentials
        run: |
          mkdir -p ios/certs
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p ~/private_keys

          printf "%s" "$IOS_CERTIFICATE" | base64 -D > ios/certs/certificate.p12
          printf "%s" "$IOS_PROVISIONING_PROFILE" | base64 -D > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          printf "%s" "$ASC_API_KEY_P8" | base64 -D > ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8
          chmod 600 ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8

          ls -l ios/certs/certificate.p12
          file ios/certs/certificate.p12
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          file ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision

      - name: Validate & extract from PKCS12
        run: |
          /usr/bin/openssl pkcs12 -in ios/certs/certificate.p12 -nokeys -passin pass:"$IOS_CERTIFICATE_PASSWORD" >/dev/null
          echo "P12 password OK (openssl)"
          /usr/bin/openssl pkcs12 -in ios/certs/certificate.p12 -nocerts -nodes -passin pass:"$IOS_CERTIFICATE_PASSWORD" -out ios/certs/key.pem
          /usr/bin/openssl pkcs12 -in ios/certs/certificate.p12 -clcerts -nokeys -passin pass:"$IOS_CERTIFICATE_PASSWORD" -out ios/certs/cert.pem
          /usr/bin/openssl pkcs8 -topk8 -nocrypt -in ios/certs/key.pem -out ios/certs/key_pkcs8.pem
          chmod 600 ios/certs/key.pem ios/certs/key_pkcs8.pem ios/certs/cert.pem

      - name: Setup keychain and import key/cert
        run: |
          set -e
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Chave (PKCS#8 PEM) -> fallback DER
          if ! security import ios/certs/key_pkcs8.pem \
                -k build.keychain -A -T /usr/bin/codesign -T /usr/bin/security; then
            /usr/bin/openssl pkcs8 -topk8 -nocrypt -in ios/certs/key_pkcs8.pem -outform DER -out ios/certs/key_pkcs8.der
            security import ios/certs/key_pkcs8.der \
              -k build.keychain -A -f pkcs8 -T /usr/bin/codesign -T /usr/bin/security
          fi

          # Certificado (PEM) -> fallback pemseq
          if ! security import ios/certs/cert.pem \
                -k build.keychain -A -T /usr/bin/codesign -T /usr/bin/security; then
            security import ios/certs/cert.pem \
              -k build.keychain -A -f pemseq -T /usr/bin/codesign -T /usr/bin/security
          fi

          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain
          security find-identity -v -p codesigning build.keychain || true

      # === CocoaPods 1.13.0 (compatível com Flutter 3.32.x) ===
      - name: Use CocoaPods 1.13.0
        run: |
          sudo gem uninstall cocoapods -aIx || true
          sudo gem install cocoapods -v 1.13.0 -NV
          pod --version

      - name: Install CocoaPods and pod install
        run: |
          export COCOAPODS_DISABLE_STATS=true
          cd ios
          pod repo update
          pod install
          test -f Runner.xcworkspace/contents.xcworkspacedata && echo "Xcode workspace OK"

      - name: Parse provisioning profile
        run: |
          PROFILE_PLIST=/tmp/profile.plist
          /usr/bin/security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision > "$PROFILE_PLIST"
          /usr/bin/plutil -convert xml1 "$PROFILE_PLIST"
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' "$PROFILE_PLIST")
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' "$PROFILE_PLIST")
          echo "PROFILE_NAME=$PROFILE_NAME"
          echo "PROFILE_UUID=$PROFILE_UUID"
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV

      # ARCHIVE sem assinatura (não poluir Pods) + destino explícito iOS
      - name: Archive (no signing)
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -destination 'generic/platform=iOS' \
            -archivePath build/Runner.xcarchive \
            clean archive \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGNING_REQUIRED=NO \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID"

      - name: Patch ExportOptions.plist
        run: |
          /usr/bin/plutil -convert xml1 ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Set :teamID $APPLE_TEAM_ID" ios/ExportOptions.plist || /usr/libexec/PlistBuddy -c "Add :teamID string $APPLE_TEAM_ID" ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Delete :provisioningProfiles" ios/ExportOptions.plist || true
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles dict" ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$BUNDLE_ID string $PROFILE_NAME" ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Set :method app-store" ios/ExportOptions.plist || /usr/libexec/PlistBuddy -c "Add :method string app-store" ios/ExportOptions.plist
          # opcional reforçar o certificado:
          /usr/libexec/PlistBuddy -c "Set :signingCertificate Apple Distribution" ios/ExportOptions.plist || /usr/libexec/PlistBuddy -c "Add :signingCertificate string Apple Distribution" ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Print" ios/ExportOptions.plist

      - name: Export IPA (signed)
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa
          ls -l build/ios/ipa

      - name: Install fastlane
        run: sudo gem install fastlane -NV

      - name: Upload to TestFlight via fastlane
        run: |
          IPA_PATH="$(ls build/ios/ipa/*.ipa | head -n 1)"
          echo "Uploading: $IPA_PATH"
          fastlane pilot upload \
            --ipa "$IPA_PATH" \
            --api_key_path ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8

name: Build iOS and Upload to TestFlight

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest

    env:
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      ASC_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
      ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}                 # P12 em Base64 (uma linha)
      IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }} # Ex.: vPNZskLS
      IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }} # .mobileprovision em Base64
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    steps:
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Flutter para iOS
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'   # ajuste se seu projeto usa outra
          channel: 'stable'
          architecture: 'arm64'

      - name: Install dependencies
        run: flutter pub get

      # 3) Preparar diretórios
      - name: Prepare directories
        run: |
          mkdir -p ios/certs
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p ~/private_keys

      # 4) Decodificar secrets (macOS usa base64 -D)
      - name: Decode credentials
        run: |
          # P12
          printf "%s" "$IOS_CERTIFICATE" | base64 -D > ios/certs/certificate.p12
          # Provisioning profile
          printf "%s" "$IOS_PROVISIONING_PROFILE" | base64 -D > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          # App Store Connect API key (.p8)
          printf "%s" "$ASC_API_KEY_P8" | base64 -D > ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8
          # Permissões restritas à chave
          chmod 600 ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8

      # 5) Sanity checks (sem vazar conteúdo)
      - name: Sanity checks (no secrets leak)
        run: |
          echo "PWD: $(pwd)"
          echo "certificate.p12 size/type:"
          ls -l ios/certs/certificate.p12
          file ios/certs/certificate.p12
          echo "profile.mobileprovision size/type:"
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          file ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          echo "ASC API key present? $(test -s ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8 && echo yes || echo no)"
          echo "P12 password length: ${#IOS_CERTIFICATE_PASSWORD}"

      # 6) Validar P12 e senha ANTES do import (evita perder tempo)
      - name: Validate PKCS12 password
        run: |
          openssl pkcs12 -in ios/certs/certificate.p12 -nokeys -passin pass:"$IOS_CERTIFICATE_PASSWORD" >/dev/null
          echo "P12 password OK (openssl validated)"

      # 7) Keychain + import do certificado
      - name: Setup keychain and import certificate
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          # Import do P12 (permite codesign e security usarem a chave)
          security import ios/certs/certificate.p12 \
            -k build.keychain \
            -P "$IOS_CERTIFICATE_PASSWORD" \
            -A \
            -T /usr/bin/codesign \
            -T /usr/bin/security

          # Dar permissão da chave privada ao codesign/security (alguns runners exigem)
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          # Opcional: listar identidades para conferir que importou
          security find-identity -v -p codesigning build.keychain || true

      # 8) Build IPA (usa seu ExportOptions.plist)
      - name: Build IPA
        run: |
          flutter build ipa --release --export-options-plist=ios/ExportOptions.plist

      # 9) Fastlane
      - name: Install fastlane
        run: sudo gem install fastlane -NV

      # 10) Upload para TestFlight via Fastlane
      - name: Upload to TestFlight via fastlane
        run: |
          IPA_PATH="$(ls build/ios/ipa/*.ipa | head -n 1)"
          echo "Uploading: $IPA_PATH"
          fastlane pilot upload \
            --ipa "$IPA_PATH" \
            --api_key_path ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8

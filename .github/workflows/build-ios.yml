name: Build iOS and Upload to TestFlight

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build-ios:
    runs-on: macos-latest

    env:
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      ASC_API_KEY_ID: ${{ secrets.ASC_API_KEY_ID }}
      ASC_API_KEY_P8: ${{ secrets.ASC_API_KEY_P8 }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      BUNDLE_ID: ${{ secrets.BUNDLE_ID }}
      IOS_CERTIFICATE: ${{ secrets.IOS_CERTIFICATE }}                   # base64 (uma linha) do .p12
      IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }} # ex: vPNZskLS
      IOS_PROVISIONING_PROFILE: ${{ secrets.IOS_PROVISIONING_PROFILE }} # base64 do .mobileprovision
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

    steps:
      # 1) Checkout
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2) Flutter para iOS
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.8'
          channel: 'stable'
          architecture: 'arm64'

      - name: Install dependencies
        run: flutter pub get

      # 3) Preparar diretórios e decodificar credenciais
      - name: Prepare & decode credentials
        run: |
          mkdir -p ios/certs
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          mkdir -p ~/private_keys

          # Decode (BSD base64 do macOS)
          printf "%s" "$IOS_CERTIFICATE" | base64 -D > ios/certs/certificate.p12
          printf "%s" "$IOS_PROVISIONING_PROFILE" | base64 -D > ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision
          printf "%s" "$ASC_API_KEY_P8" | base64 -D > ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8
          chmod 600 ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8

          echo "P12 size/type:"
          ls -l ios/certs/certificate.p12
          file ios/certs/certificate.p12

      # 4) Validar P12 e extrair chave/cert; converter chave p/ PKCS#8
      - name: Validate & extract from PKCS12
        run: |
          /usr/bin/openssl pkcs12 -in ios/certs/certificate.p12 -nokeys -passin pass:"$IOS_CERTIFICATE_PASSWORD" >/dev/null
          echo "P12 password OK (openssl)"

          # Extrai chave privada e certificado
          /usr/bin/openssl pkcs12 -in ios/certs/certificate.p12 -nocerts -nodes -passin pass:"$IOS_CERTIFICATE_PASSWORD" -out ios/certs/key.pem
          /usr/bin/openssl pkcs12 -in ios/certs/certificate.p12 -clcerts -nokeys -passin pass:"$IOS_CERTIFICATE_PASSWORD" -out ios/certs/cert.pem

          # Converte chave p/ PKCS#8 (BEGIN PRIVATE KEY)
          /usr/bin/openssl pkcs8 -topk8 -nocrypt -in ios/certs/key.pem -out ios/certs/key_pkcs8.pem
          chmod 600 ios/certs/key.pem ios/certs/key_pkcs8.pem ios/certs/cert.pem

      # 5) Keychain e import (auto-detect) + fallback DER p/ chave
      - name: Setup keychain and import key/cert
        run: |
          set -e
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          echo ">>> Importando CHAVE (PKCS#8 PEM)"
          if ! security import ios/certs/key_pkcs8.pem \
                -k build.keychain \
                -A \
                -T /usr/bin/codesign \
                -T /usr/bin/security; then
            echo "Import PEM falhou; tentando DER pkcs8..."
            /usr/bin/openssl pkcs8 -topk8 -nocrypt -in ios/certs/key_pkcs8.pem -outform DER -out ios/certs/key_pkcs8.der
            security import ios/certs/key_pkcs8.der \
              -k build.keychain \
              -A \
              -f pkcs8 \
              -T /usr/bin/codesign \
              -T /usr/bin/security
          fi

          echo ">>> Importando CERTIFICADO (PEM)"
          if ! security import ios/certs/cert.pem \
                -k build.keychain \
                -A \
                -T /usr/bin/codesign \
                -T /usr/bin/security; then
            echo "Import PEM falhou; tentando pemseq..."
            security import ios/certs/cert.pem \
              -k build.keychain \
              -A \
              -f pemseq \
              -T /usr/bin/codesign \
              -T /usr/bin/security
          fi

          # Acesso para tools da Apple
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" build.keychain

          echo ">>> Identities disponíveis:"
          security find-identity -v -p codesigning build.keychain || true

      # 6) Cocoapods (gera ios/Runner.xcworkspace)
      - name: Install CocoaPods and pod install
        run: |
          sudo gem install cocoapods -NV
          cd ios
          pod repo update
          pod install
          test -f Runner.xcworkspace/contents.xcworkspacedata && echo "Xcode workspace OK"

      # 7) Extrair nome do Provisioning Profile e arquivar com xcodebuild
      - name: Archive with xcodebuild (manual signing)
        run: |
          # Extrai o Name do .mobileprovision
          PROFILE_NAME=$(/usr/bin/security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/profile.mobileprovision | /usr/libexec/PlistBuddy -c 'Print :Name' /dev/stdin)
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "Usando PROFILE_NAME: $PROFILE_NAME"

          # Arquiva (gera .xcarchive) com assinatura manual
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -configuration Release \
            -archivePath build/Runner.xcarchive \
            clean archive \
            DEVELOPMENT_TEAM="$APPLE_TEAM_ID" \
            PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
            CODE_SIGN_STYLE=Manual \
            CODE_SIGN_IDENTITY="Apple Distribution"

      # 8) Export IPA com ExportOptions.plist
      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa
          ls -l build/ios/ipa

      # 9) Fastlane
      - name: Install fastlane
        run: sudo gem install fastlane -NV

      # 10) Upload para TestFlight
      - name: Upload to TestFlight via fastlane
        run: |
          IPA_PATH="$(ls build/ios/ipa/*.ipa | head -n 1)"
          echo "Uploading: $IPA_PATH"
          fastlane pilot upload \
            --ipa "$IPA_PATH" \
            --api_key_path ~/private_keys/AuthKey_${ASC_API_KEY_ID}.p8
